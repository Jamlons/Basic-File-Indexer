/home/jamlons/Documents/CITS2002 Second Project/CITS2002/CITS2002_project_2/compresstest.txt

/home/jamlons/Documents/CITS2002 Second Project/CITS2002/CITS2002_project_2/compresstest.txt.gz
qc 
/home/jamlons/Documents/CITS2002 Second Project/CITS2002/CITS2002_project_2/file_edits.h
header file to allow main to access functions to edit update and remove information from trove files ifndef file edits h define file edits h extern void update trove int counter extern void remove files int counter extern void build trove int counter endif 
/home/jamlons/Documents/CITS2002 Second Project/CITS2002/CITS2002_project_2/filenames.c
function for finding the given word within the given trovefile include trove h include string h include stdio h find the word given by user within the file stream provided returns 1 if a name is found otherwise returns 0 int find names file fp global structure read file structure rfs read file structure read compressed int amount of files found 0 char buf char line null char file path null size t linesize 0 ssize t linelen count for what line we are on int count 1 while grabbing each line from the file while linelen getline line linesize stdin 1 if line is a filepath line odd number if count 2 0 copy the line to file path and continue file path strdup line count continue count grab the first word with a space token buf strtok line while parsing through each word while buf null copy the word to a temp memory location needs to work for strcmp to work char temp strdup rfs word if the parsed word does equal the word we are searching for if strcmp temp buf print file path out and break out of the entire loop printf s file path amount of files found break buf strtok null return 1 if file is found return amount of files found fclose fp 
/home/jamlons/Documents/CITS2002 Second Project/CITS2002/CITS2002_project_2/filenames.o
elf 
/home/jamlons/Documents/CITS2002 Second Project/CITS2002/CITS2002_project_2/findfiles.c
function for finding the files within directories include trove h include stdio h include stdlib h include sys types h include sys stat h include time h include unistd h include dirent h include string h int dircounter 0 to see if file is a regular file or a directory returns 1 if reg returns 2 if dir int file attributes char filename struct stat stat buffer failed to open stat buffer for the given filename if stat filename stat buffer 0 perror progname exit exit failure is a file is readable else if s isreg stat buffer st mode return 1 is a directory is readable else if s isdir stat buffer st mode return 2 return 0 lists every file or directory within a given directory void list directory char dirname file text pointer char fullpath path max printf directory name is s n dirname directory structure ds dir struct dir dirp struct dirent dp dirp opendir dirname if dirp null perror progname exit exit failure printf dir counter is d n dircounter while dp readdir dirp null if strcmp dp d name strcmp dp d name continue printf current file dir looking at is s n dp d name sprintf fullpath s s dirname dp d name int file type file attributes fullpath if file type 1 printf file is reg n add file path text pointer fullpath read file text pointer fullpath else if file type 2 printf dir path stored at counter d n dircounter ds dirlist dircounter strdup fullpath dircounter printf dir counter now is d n dircounter else printf unknown n while dircounter 0 dircounter if dircounter 0 break printf dir counter to access dir path is d n dircounter printf full path is s n ds dirlist dircounter printf ncalling function again n list directory ds dirlist dircounter text pointer closedir dirp 
/home/jamlons/Documents/CITS2002 Second Project/CITS2002/CITS2002_project_2/findfiles.o
elf calling function again 
/home/jamlons/Documents/CITS2002 Second Project/CITS2002/CITS2002_project_2/globals.c
function for declaring global values include trove h default file name char default file name tmp trove global default error messages char progname trove int exit failure 8 int exit success 0 
/home/jamlons/Documents/CITS2002 Second Project/CITS2002/CITS2002_project_2/globals.o
elf 
/home/jamlons/Documents/CITS2002 Second Project/CITS2002/CITS2002_project_2/indexing.c
function for indexing file info include trove h include stdio h include limits h include stdlib h include sys types h include sys stat h include sys param h include dirent h include unistd h not every library is needed please remove adds the full file path to the given trove file void add file path file fp char file name grab the resolved full path name char resolved path get resolved path file name add file path to text file fprintf fp s n resolved path char get resolved path char file name create a buffer that is the max limit a path can be char buf path max grab the resolved full path name char resolved path realpath file name buf if resolved path null perror realpath exit exit failure return resolved path void compress file global structure read file structure rfs read file structure printf compressing file n int thepipe 2 if pipe thepipe 0 printf cannot create pipe exit exit failure switch fork fork failed case 1 printf fork failed exiting exit exit failure break child process case 0 close thepipe 1 child will never write to pipe dup2 thepipe 0 0 duplicate the reading descriptor and stdin close thepipe 0 close the reading descriptor child may now read from its stdin fd 0 int check execl usr bin gzip gzip k rfs file name null if check 1 perror urs bin gzip exit exit failure printf file compressed break default break void read compressed global structure read file structure rfs read file structure printf reading file n int thepipe 2 char data 1024 int datasize nbytes if pipe thepipe 0 printf cannot create pipe exit exit failure switch fork fork failed case 1 printf fork failed exiting exit exit failure break child process case 0 close thepipe 0 child will never read from pipe dup2 thepipe 1 1 duplicate the writing descriptor and stdout close thepipe 1 close the writing descriptor child may now write from its stdin fd 1 execute new program terminating the child process char full path path max sprintf full path s s rfs file name gz execl usr bin zcat zcat full path null perror urs bin zcat exit exit failure break default close thepipe 1 child will never read from pipe dup2 thepipe 0 0 duplicate the writing descriptor and stdout close thepipe 0 close the writing descriptor parent may now write to its stdin fd 0 char test 6000 while fgets test 6000 stdin printf s test break 
/home/jamlons/Documents/CITS2002 Second Project/CITS2002/CITS2002_project_2/indexing.o
elf 
/home/jamlons/Documents/CITS2002 Second Project/CITS2002/CITS2002_project_2/Makefile
a makefile for our project c11 cc std c11 cflags wall pedantic werror project trove headers project h obj trove o globals o findfiles o filenames o indexing o remove o trovefile o update o words o project obj c11 cflags o project obj lm o c headers c11 cflags c clean rm f project obj rm f obj 
/home/jamlons/Documents/CITS2002 Second Project/CITS2002/CITS2002_project_2/README.md
cits2002 project 2 the goal of this project is to design and develop a command line utility program named trove to build and search a compressed index of the contents of files successful completion of the project will develop and enhance your understanding of advanced features of the c11 programming language core linux and macos system calls posix function calls and the use of the make utility some of the contents of all required files are to be stored in a trove file a trove file will contain the absolute pathnames of the files that have been indexed and each of the words found in those files the words indexed by trove are minimum length sequences of alphanumeric characters some example words are main australia and gtho351 the character sequence covid 19 contains 2 words but the second word might not be stored if indexed words must be at least 3 characters long naturally if many files are indexed or if many words are found the trove file has the potential to become very large thus the trove file will be compressed when stored on disk 
/home/jamlons/Documents/CITS2002 Second Project/CITS2002/CITS2002_project_2/remove.c
function to remove file info from given trovefile won t work see findnames c to see how its done include trove h include file edits h include stdio h include stdlib h include string h include limits h to remove lines from files must duplicate the text file without said lines in it void remove files int counter read file structure rfs read file structure char temp file name as239gnma9yhq9109k23 txt file new file create trove temp file name read compressed char full path path max sprintf full path s s rfs file name gz if file stream failed if new file null printf unable to open s weird temp file name perror progname exit exit failure char line null char file path null char file list path null size t linesize 0 ssize t linelen int count 1 while grabbing each line of the text file while linelen getline line linesize stdin 1 int flag 0 printf grabbing lines n printf count is d n count if line is a file path odd number if count 2 0 save file path to a temp location file path strdup line make n character null file path strlen file path 1 0 printf file path is s n file path for every file in filelist for int a 0 a counter a file list path get resolved path rfs filelist a printf current file given is s n file list path if the file path and file list equal if strcmp file path file list path printf files match removing n printf file name is s line increase count by two this will skip over both the file path and the words in said file linelen getline line linesize stdin printf file contents is s line why do we need this i can t figure out why it is needed for the remove function to work flag 1 continue if the file path is not to be removed add it to the new file if flag continue printf adding s to the file file path fprintf new file s n file path count continue file path must be true add all words to next line else fprintf new file s line count remove old file remove rfs file name remove full path printf removing old file n rename new file as old file name rename temp file name rfs file name fclose new file free line 
/home/jamlons/Documents/CITS2002 Second Project/CITS2002/CITS2002_project_2/remove.o
elf 
/home/jamlons/Documents/CITS2002 Second Project/CITS2002/CITS2002_project_2/temp/testing text
im inside a folder jerry 
/home/jamlons/Documents/CITS2002 Second Project/CITS2002/CITS2002_project_2/temp/filenames.c
function for finding the given word within the given trovefile include trove h include string h include stdio h find the word given by user within the file stream provided int find names file fp read file structure rfs read file structure int amount of files found 0 char buf char line null char file path null size t linesize 0 ssize t linelen count for what line we are on int count 1 while grabbing each line from the file while linelen getline line linesize fp 1 if line is a filepath line odd number if count 2 0 copy the line to file path and continue file path strdup line count continue count grab the first word with a space token buf strtok line while parsing through each word while buf null copy the word to a temp memory location needs to work for strcmp to work char temp strdup rfs word if the parsed word does equal the word we are searching for if strcmp temp buf print file path out and break out of the entire loop printf s n file path amount of files found break buf strtok null return 1 if file is found return amount of files found 
/home/jamlons/Documents/CITS2002 Second Project/CITS2002/CITS2002_project_2/temp/test/testing text
im inside a second folder jerry 
/home/jamlons/Documents/CITS2002 Second Project/CITS2002/CITS2002_project_2/temp/test/3rdfolder/testing text_3rd
im inside a third folder jerry 
/home/jamlons/Documents/CITS2002 Second Project/CITS2002/CITS2002_project_2/temp/test/3rdfolderthesecond/testing text
im inside a third folder the second jerry 
/home/jamlons/Documents/CITS2002 Second Project/CITS2002/CITS2002_project_2/test
home jamlons documents cits2002 second project cits2002 cits2002 project 2 file edits h header file to allow main to access functions to edit update and remove information from trove files ifndef file edits h define file edits h extern void update trove int counter extern void remove files int counter extern void build trove int counter endif home jamlons documents cits2002 second project cits2002 cits2002 project 2 filenames c function for finding the given word within the given trovefile include trove h include string h include stdio h find the word given by user within the file stream provided returns 1 if a name is found otherwise returns 0 int find names file fp global structure read file structure rfs read file structure int amount of files found 0 char buf char line null char file path null size t linesize 0 ssize t linelen count for what line we are on int count 1 while grabbing each line from the file while linelen getline line linesize fp 1 if line is a filepath line odd number if count 2 0 copy the line to file path and continue file path strdup line count continue count grab the first word with a space token buf strtok line while parsing through each word while buf null copy the word to a temp memory location needs to work for strcmp to work char temp strdup rfs word if the parsed word does equal the word we are searching for if strcmp temp buf print file path out and break out of the entire loop printf s file path amount of files found break buf strtok null return 1 if file is found return amount of files found fclose fp home jamlons documents cits2002 second project cits2002 cits2002 project 2 filenames o elf home jamlons documents cits2002 second project cits2002 cits2002 project 2 findfiles c function for finding the files within directories include trove h include stdio h include stdlib h include sys types h include sys stat h include time h include unistd h include dirent h include string h int dircounter 0 to see if file is a regular file or a directory returns 1 if reg returns 2 if dir int file attributes char filename struct stat stat buffer failed to open stat buffer for the given filename if stat filename stat buffer 0 perror progname exit exit failure is a file is readable else if s isreg stat buffer st mode return 1 is a directory is readable else if s isdir stat buffer st mode return 2 return 0 lists every file or directory within a given directory void list directory char dirname file text pointer char fullpath path max printf directory name is s n dirname directory structure ds dir struct dir dirp struct dirent dp dirp opendir dirname if dirp null perror progname exit exit failure printf dir counter is d n dircounter while dp readdir dirp null if strcmp dp d name strcmp dp d name continue printf current file dir looking at is s n dp d name sprintf fullpath s s dirname dp d name int file type file attributes fullpath if file type 1 printf file is reg n add file path text pointer fullpath read file text pointer fullpath else if file type 2 printf dir path stored at counter d n dircounter ds dirlist dircounter strdup fullpath dircounter printf dir counter now is d n dircounter else printf unknown n while dircounter 0 dircounter if dircounter 0 break printf dir counter to access dir path is d n dircounter printf full path is s n ds dirlist dircounter printf ncalling function again n list directory ds dirlist dircounter text pointer closedir dirp home jamlons documents cits2002 second project cits2002 cits2002 project 2 findfiles o elf calling function again home jamlons documents cits2002 second project cits2002 cits2002 project 2 globals c function for declaring global values include trove h default file name char default file name tmp trove global default error messages char progname trove int exit failure 8 int exit success 0 home jamlons documents cits2002 second project cits2002 cits2002 project 2 globals o elf home jamlons documents cits2002 second project cits2002 cits2002 project 2 indexing c function for indexing file info include trove h include stdio h include limits h include stdlib h include sys types h include sys stat h include sys param h include dirent h include unistd h not every library is needed please remove adds the full file path to the given trove file void add file path file fp char file name grab the resolved full path name char resolved path get resolved path file name add file path to text file fprintf fp s n resolved path char get resolved path char file name create a buffer that is the max limit a path can be char buf path max grab the resolved full path name char resolved path realpath file name buf if resolved path null perror realpath exit exit failure return resolved path void compress file global structure read file structure rfs read file structure printf compressing file n int thepipe 2 char data 1024 int datasize nbytes if pipe thepipe 0 printf cannot create pipe exit exit failure switch fork fork failed case 1 printf fork failed exiting exit exit failure break child process case 0 close thepipe 1 child will never write to pipe dup2 thepipe 0 0 duplicate the reading descriptor and stdin close thepipe 0 close the reading descriptor child may now read from its stdin fd 0 int check execl usr bin gzip gzip k rfs file name null if check 1 perror urs bin gzip exit exit failure printf file compressed break default break home jamlons documents cits2002 second project cits2002 cits2002 project 2 indexing o elf home jamlons documents cits2002 second project cits2002 cits2002 project 2 makefile a makefile for our project c11 cc std c11 cflags wall pedantic werror project trove headers project h obj trove o globals o findfiles o filenames o indexing o remove o trovefile o update o words o project obj c11 cflags o project obj lm o c headers c11 cflags c clean rm f project obj rm f obj home jamlons documents cits2002 second project cits2002 cits2002 project 2 readme md cits2002 project 2 the goal of this project is to design and develop a command line utility program named trove to build and search a compressed index of the contents of files successful completion of the project will develop and enhance your understanding of advanced features of the c11 programming language core linux and macos system calls posix function calls and the use of the make utility some of the contents of all required files are to be stored in a trove file a trove file will contain the absolute pathnames of the files that have been indexed and each of the words found in those files the words indexed by trove are minimum length sequences of alphanumeric characters some example words are main australia and gtho351 the character sequence covid 19 contains 2 words but the second word might not be stored if indexed words must be at least 3 characters long naturally if many files are indexed or if many words are found the trove file has the potential to become very large thus the trove file will be compressed when stored on disk home jamlons documents cits2002 second project cits2002 cits2002 project 2 remove c function to remove file info from given trovefile won t work see findnames c to see how its done include trove h include file edits h include stdio h include stdlib h include string h to remove lines from files must duplicate the text file without said lines in it void remove files int counter read file structure rfs read file structure char temp file name as239gnma9yhq9109k23 txt file new file create trove temp file name file old file read trove rfs file name if file stream failed if new file null printf unable to open s weird temp file name perror progname exit exit failure if file stream failed if old file null printf unable to open s please make sure it is correct rfs file name perror progname exit exit failure char line null char file path null char file list path null size t linesize 0 ssize t linelen int count 1 while grabbing each line of the text file while linelen getline line linesize old file 1 int flag 0 printf grabbing lines n printf count is d n count if line is a file path odd number if count 2 0 save file path to a temp location file path strdup line make n character null file path strlen file path 1 0 printf file path is s n file path for every file in filelist for int a 0 a counter a file list path get resolved path rfs filelist a printf current file given is s n file list path if the file path and file list equal if strcmp file path file list path printf files match removing n printf file name is s line increase count by two this will skip over both the file path and the words in said file linelen getline line linesize old file printf file contents is s line why do we need this i can t figure out why it is needed for the remove function to work flag 1 continue if the file path is not to be removed add it to the new file if flag continue printf adding s to the file file path fprintf new file s n file path count continue file path must be true add all words to next line else fprintf new file s line count remove old file remove rfs file name printf removing old file rename new file as old file name rename temp file name rfs file name fclose new file fclose old file free line home jamlons documents cits2002 second project cits2002 cits2002 project 2 remove o elf home jamlons documents cits2002 second project cits2002 cits2002 project 2 temp testing text im inside a folder jerry home jamlons documents cits2002 second project cits2002 cits2002 project 2 temp filenames c function for finding the given word within the given trovefile include trove h include string h include stdio h find the word given by user within the file stream provided int find names file fp read file structure rfs read file structure int amount of files found 0 char buf char line null char file path null size t linesize 0 ssize t linelen count for what line we are on int count 1 while grabbing each line from the file while linelen getline line linesize fp 1 if line is a filepath line odd number if count 2 0 copy the line to file path and continue file path strdup line count continue count grab the first word with a space token buf strtok line while parsing through each word while buf null copy the word to a temp memory location needs to work for strcmp to work char temp strdup rfs word if the parsed word does equal the word we are searching for if strcmp temp buf print file path out and break out of the entire loop printf s n file path amount of files found break buf strtok null return 1 if file is found return amount of files found home jamlons documents cits2002 second project cits2002 cits2002 project 2 temp test testing text im inside a second folder jerry home jamlons documents cits2002 second project cits2002 cits2002 project 2 temp test 3rdfolder testing text 3rd im inside a third folder jerry home jamlons documents cits2002 second project cits2002 cits2002 project 2 temp test 3rdfolderthesecond testing text im inside a third folder the second jerry home jamlons documents cits2002 second project cits2002 cits2002 project 2 trove elf e you have entered the wrong invoking in the cmd please make sure you are either using trove f trovefile word or trove f trovefile b r u l length positive integer filelist calling function again counter is d home jamlons documents cits2002 second project cits2002 cits2002 project 2 trove c include trove h include file edits h include stdio h include stdbool h include stdlib h include string h include unistd h include getopt h char progname define optlist f brul cits2002 project 2 2022 student1 23135002 willoughby joel 65 student2 22895688 mcneil jarrad 35 to return information regarding the usage of this program void usage bool flag if flag printf nyou have entered the wrong invoking in the cmd printf nplease make sure you are either using n trove f trovefile word nor n trove f trovefile b r u l length positive integer filelist n exit exit failure main function of trove int main int argc char argv int counter 0 global structure read file structure rfs read file structure int opt default the structures with global variables rfs file name strdup default file name rfs min word length 4 bool bflag false bool uflag false bool rflag false opterr 0 while opt getopt argc argv optlist 1 accept file name if opt f rfs file name strdup optarg accept build option else if opt b bflag true if another option has already been given if rflag uflag argc 1 accept remove option else if opt r rflag true if another option has already been given if bflag uflag argc 1 accept update option else if opt u uflag true if another option has already been given if bflag rflag argc 1 accept word length else if opt l rfs min word length atoi optarg if word length isn t positive or is 0 if rfs min word length 0 argc 1 unknown argument else printf unknown argument n argc 1 if argc 0 usage 1 for each left over command while optind argc if searching for a word if bflag rflag uflag int file found 0 int temp optind temp if there are more than one word given break if temp argc usage 1 else add word to global structure rfs word strdup argv optind create pointer in read mode file find pointer read trove rfs file name if find pointer null exit exit failure find the words within given file file found find names find pointer fclose find pointer if file found exit exit success else exit exit failure else if bflag rflag uflag for each file given add to a list printf adding s to filelist n argv optind rfs filelist counter strdup argv optind counter optind if building a file if bflag build trove counter compress file if removing data from file else if rflag remove files counter if updating a file else if uflag update trove counter return 1 home jamlons documents cits2002 second project cits2002 cits2002 project 2 trovefile c functions for editing reading writing to trove files include trove h include stdio h include stdbool h include stdlib h include string h include unistd h include getopt h function for returning a file stream pointer in write mode for given filename file create trove char trovename file fp fp fopen trovename w if fp null perror progname exit exit failure printf file s has been created n trovename return fp function for returning a file stream pointer in append mode for given filename file append trove char filename file fp fp fopen filename a if fp null perror progname exit exit failure return fp function for returning a file stream pointer in read mode for given filename file read trove char filename file fp fp fopen filename r if fp null perror progname exit exit failure return fp home jamlons documents cits2002 second project cits2002 cits2002 project 2 trovefile o elf home jamlons documents cits2002 second project cits2002 cits2002 project 2 trove h ifndef trove h include stdio h define trove h define bufsize 100000 extern char default file name extern int exit failure extern int exit success extern int file attributes char filename extern void read file file fp char filename extern file create trove char trovename extern file append trove char filename extern file read trove char filename extern void add file path file fp char file name extern void list directory char dirname file fp extern int find names file fp extern char get resolved path char file name extern void compress file extern char progname typedef struct char file name char word int min word length char resolved path char filelist read file structure typedef struct int dircounter char dirlist directory structure read file structure read file structure directory structure dir struct endif home jamlons documents cits2002 second project cits2002 cits2002 project 2 trove o elf e you have entered the wrong invoking in the cmd please make sure you are either using trove f trovefile word or trove f trovefile b r u l length positive integer filelist home jamlons documents cits2002 second project cits2002 cits2002 project 2 trove sample data baseball zone identifier zonetransfer zoneid 3 referrerurl c users jarrad downloads trove sample data zip home jamlons documents cits2002 second project cits2002 cits2002 project 2 trove sample data rotate c include stdio h include stdlib h include string h include ctype h compile this program with cc std c11 wall werror o rotate rotate c define rot 13 the rotate function returns the character rot positions further along the alphabetic character sequence from c or c if c is not lower case char rotate char c check if c is lower case or not if islower c the ciphered character is rot positions beyond c allowing for wrap around return a c a rot 26 else return c execution of the whole program begins at the main function int main int argcount char argvalue exit with an error if the number of arguments including the name of the executable is not precisely 2 if argcount 2 fprintf stderr s program expected 1 argument but instead received d n argvalue 0 argcount 1 exit exit failure else define a variable for a later loop int i calculate the length of the first argument int length strlen argvalue 1 loop for every character in the text for i 0 i length i determine and print the ciphered character printf c rotate argvalue 1 i print one final new line character printf n exit indicating success exit exit success return 0 home jamlons documents cits2002 second project cits2002 cits2002 project 2 trove sample data pizza if you have a pizza with radius z and thickness a its volume is pi z z a home jamlons documents cits2002 second project cits2002 cits2002 project 2 trove sample data baseball http sports yahoo com blogs mlb big league stew jean segura steals second then steals first bizarre 103642855 mlb html in baseball the object is to iterate as many tokens as you can through a 4 slotted dequeue fifo implemented internally as a self referencing doubly linked list iteration run time is earned by the batting team by causing the hardest to solve ball sorting problems possible for the other team most entropic ball state the opposing team manages a counter labeled outs initialized to 0 each inning if the counter is incremented to 3 the teams switch objectives and a the out counter is reset each full iteration of a player though the buffer increments a team s run variable the team with the greatest runs wins typically by earning the most loop execution time the team managing the out counter distributes themselves optimally around the field such that they ll be able to detect the ball s location within a short period of time and so that they can sort the ball back to their prime ball holder the pitcher to get a chance to increment the out counter and thus eventually have their turn at bat and increase their runs the pitching team gives the batting team a chance to hit the ball and cause the ball sorting problem while the ball is being sorted player tokens can iterate through the fifo buffer nodes bases only one additional player can enter base queue per sorting problem created the bases are allowed to be null no players and players can move in both directions around the loop a pitcher must give adequate chance for the ball sorting problem to be created by passing the ball through a volume called the strike zone which is created by clipping the prismatic space above home plate to the vertical interval between the batter s knees and the midpoint in their chest the midpoint is a point half way between the shoulders and top of the pants note creating an impossible planar strike zone by pulling one s pants down to the knee and bending at the waste to bring the shoulders in line is considered extremely rude unsportsmanlike conduct if the batter does not swing at a valid pitch then it is counted against them as a strike if the bat is swung at the ball and no valid sorting problem is created it is considered a strike whether the ball passed through the strike zone or not if a batter accumulates 3 strikes it is converted to an out and their iteration is preempted the pitcher may throw outside the strike zone to trick the player into leaping at an unfair starting condition but if the player does not swing at such invalid pitches then they are considered unfit balls four such balls allows the player to automatically reach 1st base safely and if occupied the bases will increment possibly causing a run to be scored this is called walking since there is no danger of being interrupted walks in the park are quite nice but do not make for good games a batter must cause a valid sorting problem with the ball within 3 attempts swings at valid pitches or they lose their chance to enter the fifo and the out counter is incremented valid sorting problems are those where the post hit ball travel vector is within the area formed by rotating a ray extending from home through base 0 until it intersects base 3 inclusive if the valid ball is hit out of the park or strikes the pole erected along the base lines to make the problem space visible while above the fence then the ball sorting problem is considered infinitely complex and the iteration queue can be emptied of all players actively in the fifo buffer and they all count as runs this is called a home run the ball sorting problem is considered too simple if the ball is caught from out of the air directly by the opposing team before it strikes the ground and such counts as an immediate out forfeiting the running player s iteration cycle hitting the ball outside the valid sorting problem space is called a foul ball counting as a strike the player at bat begins at base zero home and after hitting the ball tries to iterate from base1 to base2 to base3 and back home around the diamond shape without getting touched by the ball or a glove covered ball if the opposing team touches with the ball a player in the process of updating the base node states moving between them then the out counter is incremented the iterating player s value is considered corrupted and they are immediately garbage collected from the iteration area and re ineserted into the at bat chance queue while a player is stored in a node touching a base they are considered immutable safe and touching them with the ball does not remove them from the fifo queue if the destination base is touched while the player is iterating and to return is impossible due to 1st base iteration or players behind pushing them forward then they are considered out as well the moment a running player touches home base on their final increment they are no longer considered in the fifo queue and the run counter is incremented this resolves the issue of a player running home while a player is at bat the players on the base nodes are in an unstable state and can attempt to iterate to a non null base or home pretty much at any time however while the pitcher has control of the ball he creates a deadlock in the running iterations by threat of race condition due to of his ability to deliver the ball to a destination base or player who can tag the runner out tossing the ball directly at the iterating players is considered illegal because of injury concerns so when the batter strikes the ball any on base players consider their chances of successful iteration and may attempt to run they take advantage of the length of time it takes for the opposing team to sort the ball back into a high risk state storing two running players per node or swapping player order is considered an illegal operation the lower valued player must return to the prior node or be counted out the pitcher gives batters a chance to create sorting problems while keeping runners in dead lock preventing iteration the batter creates the most time consuming sorting problem possible including just tapping the ball bunting it leaving it near home plate the runners look for opportunities to iterate without causing exceptions all while some scoreboard software fails to implement a doubly linked list properly home jamlons documents cits2002 second project cits2002 cits2002 project 2 trove sample data rotate c zone identifier zonetransfer zoneid 3 referrerurl c users jarrad downloads trove sample data zip home jamlons documents cits2002 second project cits2002 cits2002 project 2 trove sample data dilbert requirements jpg zone identifier zonetransfer zoneid 3 referrerurl c users jarrad downloads trove sample data zip home jamlons documents cits2002 second project cits2002 cits2002 project 2 trove sample data rotate elf home jamlons documents cits2002 second project cits2002 cits2002 project 2 trove sample data rotate zone identifier zonetransfer zoneid 3 referrerurl c users jarrad downloads trove sample data zip home jamlons documents cits2002 second project cits2002 cits2002 project 2 trove sample data pizza zone identifier zonetransfer zoneid 3 referrerurl c users jarrad downloads trove sample data zip home jamlons documents cits2002 second project cits2002 cits2002 project 2 trove sample data csseduck png zone identifier zonetransfer zoneid 3 referrerurl c users jarrad downloads trove sample data zip home jamlons documents cits2002 second project cits2002 cits2002 project 2 trove sample data src estimatecron sample c zone identifier zonetransfer zoneid 3 referrerurl c users jarrad downloads trove sample data zip home jamlons documents cits2002 second project cits2002 cits2002 project 2 trove sample data src estimatecron sample c include stdio h include stdlib h include stdbool h include string h include unistd h include ctype h include time h written by chris mcdonald uwa edu au aug 2022 under licence creativecommons org licenses by nc sa 4 0 compile with cc std c11 wall werror o estimatecron estimatecron c execute with estimatecron month crontab file estimates file or debug y estimatecron month crontab file estimates file define max line length 100 define max command length 40 define max crontabs 20 define max estimates 20 define max processes 20 define columns crontab 6 define columns estimates 2 define char comment define str asterisk define asterisk 1 data read from crontab file provided on command line the fields are named to match those of a struct tm from time h struct int min 0 59 or asterisk iff int hour 0 23 int mday 1 31 int mon 0 11 int wday 0 6 int cmdindex index into the estimates crontabs max crontabs int n crontabs 0 data read from estimates file provided on command line struct char name max command length 1 1 for 0 byte int minutes estimate of execution time int ntimes number of times invoked estimates max estimates int n estimates 0 the very simple process table representing currently running processes struct int pid 1 2 int cmdindex index into the estimates int finishtime in minutes process table max processes int n processes 0 required statistics int total invoked 0 total commands ever invoked int max running 0 max processes running at any time bool debug false true iff environ variable debug defined define n months 12 int days in month n months 31 28 31 30 31 30 31 31 30 31 30 31 char month names n months jan feb mar apr may jun jul aug sep oct nov dec define n weekdays 7 char weekday names n weekdays sun mon tue wed thu fri sat remove any trailing end of line characters from the line from lecture 8 void trim line char line loop until we reach the end of line int i 0 while line i 0 if line i r line i n carriage return or newline line i 0 overwrite with null byte break leave the loop early i i 1 iterate through character array is whitespace could be implemented as a preprocessor macro or a c function define is whitespace ch ch ch t bool is comment line char line int i 0 while is whitespace line i skip until first non whitespace i return line i char comment bool all digits char str for int i 0 str i 0 i if isdigit str i return false return true int check integer char str int minvalue int maxvalue char errdesc if strcmp str str asterisk 0 return asterisk else if all digits str int value atoi str if value minvalue value maxvalue return value fprintf stderr s is an invalid s n str errdesc exit exit failure int check month char str bool permit asterisk if permit asterisk strcmp str str asterisk 0 return asterisk else if all digits str int month atoi str if month 0 month n months return month else for int m 0 m n months m if strncmp month names m str 3 0 str 3 0 return m fprintf stderr s is an invalid month n str exit exit failure int check weekday char str if strcmp str str asterisk 0 return asterisk else if all digits str int weekday atoi str if weekday 0 weekday n weekdays return weekday else for int m 0 m n weekdays m if strncmp weekday names m str 3 0 str 3 0 return m fprintf stderr s is an invalid day of the week n str exit exit failure int find command in estimates char command for int e 0 e n estimates e if strcmp estimates e name command 0 return e fprintf stderr s is an unknown command n command exit exit failure void print integer int x if x asterisk printf s str asterisk else printf 2i x void print 1 crontab entry int c print integer crontabs c min print integer crontabs c hour print integer crontabs c mday print integer crontabs c mon print integer crontabs c wday printf t t s n estimates crontabs c cmdindex name not required print the contents of crontabs to confirm what was read void display crontabs void if debug n crontabs 0 printf crontab entries n for int c 0 c n crontabs c printf t print 1 crontab entry c printf n not required print the contents of estimates to confirm what was read void display estimates void if debug n estimates 0 printf estimates entries n for int e 0 e n estimates e printf t 40s t i n estimates e name estimates e minutes printf n void read crontab file char filename file fp fopen filename r report an error terminate if file cannot be opened if fp null fprintf stderr unable to open crontab file s n filename exit exit failure int lc 0 linecount for error reports char line max line length 1 while fgets line sizeof line fp null lc trim line line remove n or r ignore a comment line if is comment line line continue expected format mins hours monthday month weekday command name char min max line length probably longer than needed char hour max line length but guaranteed to be long enough char mday max line length char mon max line length char wday max line length char cmd max line length int valid columns 0 if sscanf line s s s s s s min hour mday mon wday cmd columns crontab crontabs n crontabs min check integer min 0 59 minute crontabs n crontabs hour check integer hour 0 23 hour crontabs n crontabs mday check integer mday 1 31 day of the month crontabs n crontabs mon check month mon true crontabs n crontabs wday check weekday wday crontabs n crontabs cmdindex find command in estimates cmd if crontabs n crontabs mon asterisk crontabs n crontabs mday days in month crontabs n crontabs mon valid columns columns crontab if valid columns columns crontab fprintf stderr line i unrecognized in crontab file s n lc line exit exit failure n crontabs end of fgets fclose fp void read estimates file char filename file fp fopen filename r report an error terminate if file cannot be opened if fp null fprintf stderr unable to open estimates file s n filename exit exit failure int lc 0 linecount for error reports char line max line length 1 while fgets line sizeof line fp null lc trim line line remove n or r ignore a comment line if is comment line line continue expected format command name minutes int valid columns 0 char minutes max line length if sscanf line s s estimates n estimates name minutes columns estimates estimates n estimates minutes atoi minutes if estimates n estimates minutes 0 valid columns columns estimates if valid columns columns estimates fprintf stderr line i unrecognized in estimates file s n lc line exit exit failure n estimates end of fgets fclose fp execute a new command by adding it to the process table updating statistics void invoke process int c int now char when if n processes max processes static int pid 0 not required just for debugging int cmdindex crontabs c cmdindex add this new process to the process table process table n processes cmdindex cmdindex process table n processes pid pid process table n processes finishtime now estimates cmdindex minutes n processes total invoked estimates cmdindex ntimes have we found a new maximum number of ever running processes if max running n processes max running n processes if debug if when 0 printf s n when when 0 0 printf t tinvoke pid i nrunning i t pid n processes print 1 crontab entry c else if debug printf t tcannot invoke new process maximum i n max processes have any of the currently running processes now finished void terminate processes int now char when for int p 0 p n processes p if process table p finishtime now finished if debug if when 0 printf s n when when 0 0 printf t thas terminated pid i nrunning i t s n process table p pid n processes 1 estimates process table p cmdindex name remove this terminated process from process table process table p process table n processes 1 n processes p a match could be implemented as a preprocessor macro or a c function define a match x y x y x asterisk date calendar based code re used from workshop 2 void simulate int this minute struct tm tp char when 40 if debug sprintf when 02i 02i t 02i s tp tm hour tp tm min tp tm mday month names tp tm mon remove any processes that have terminated within the past minute terminate processes this minute when iterate over all crontab entries finding matching ones for int c 0 c n crontabs c does the current time match all of the date time fields if a match crontabs c min tp tm min a match crontabs c hour tp tm hour a match crontabs c mday tp tm mday a match crontabs c mon tp tm mon a match crontabs c wday tp tm wday if here then this crontab entry requires a new process to be invoked invoke process c this minute when foreach crontab entry date calendar based code re used from workshop 2 void iterate over all minutes v1 int month int year set all fields of tm to zero to make some fields unknown struct tm tm memset tm 0 sizeof tm initialize the fileds that we already know tm tm mday 1 1st day of required month tm tm mon month 0 jan 1 feb tm tm year year 1900 time t secs int mins iterate over all of the minutes in the required month int total minutes 60 24 days in month month for secs mktime tm mins 0 mins total minutes secs 60 mins struct tm tp localtime secs simulate mins tp if debug printf n void iterate over all minutes v2 int month int year set all fields of tm to zero to make some fields unknown struct tm tm memset tm 0 sizeof tm initialize the fileds that we already know tm tm mday 1 1st day of required month tm tm mon month 0 jan 1 feb tm tm year year 1900 ask the posix function mktime to determine the unknown fields see http pubs opengroup org onlinepubs 9699919799 mktime tm tm tm mday 0 tm tm wday tm tm wday 6 7 previous day of the week iterate over all of the minutes in the required month int total minutes 60 24 days in month month for int mins 0 mins total minutes mins tm tm min mins 60 tm tm hour mins 60 24 if tm tm hour 0 tm tm min 0 now at midnight 00 00 tm tm mday advance to tomorrow tm tm wday tm tm wday 1 7 simulate mins tm if debug printf n void reset statistics void n processes 0 total invoked 0 max running 0 void print statistics void if debug n estimates 0 printf command invocations n for int e 0 e n estimates e printf t 40s t i n estimates e name estimates e ntimes printf n int maxi 1 maximum invoked int maxe 1 index in estimates of maximum for int e 0 e n estimates e if maxi estimates e ntimes maxi estimates e ntimes maxe e the all important final result line printf s t i t i n maxe 1 none estimates maxe name total invoked max running int main int argc char argv if argc 4 fprintf stderr usage s month crontab file estimates file n argv 0 exit exit failure debug getenv debug null not required for project read the estimates file first so that all command names are known read estimates file argv 3 not required print the contents of estimates to confirm what was read display estimates read the crontab file only accepting known command names read crontab file argv 2 not required print the contents of crontabs to confirm what was read display crontabs if n crontabs 0 month may be requested with an integer 0 11 or 3 letter name not int month check month argv 1 false time t now time null int year localtime now tm year 1900 current year reset statistics iterate over all minutes v1 month year print statistics reset statistics iterate over all minutes v2 month year print statistics exit exit success return 0 home jamlons documents cits2002 second project cits2002 cits2002 project 2 trove sample data src mycal solution c zone identifier zonetransfer zoneid 3 referrerurl c users jarrad downloads trove sample data zip home jamlons documents cits2002 second project cits2002 cits2002 project 2 trove sample data src mycal solution c written by chris mcdonald uwa edu au compile cc std c99 wall werror o mycal mycal c run mycal month year include stdio h required for printf include stdlib h required for atoi include first day of month c including c source usually strongly encouraged these are our default values used if command line args not provided define default month 8 define default year 2022 define nweeks 6 define days per week 7 our print cal function receives 2 arguments but doesn t return a value void print cal int month int year int day1 1 1st aug 2022 is a monday later initialise this with a call to first day of month month year int day1 first day of month month year int daysinmonth 0 switch month case 1 printf january i n year daysinmonth 31 break add other months worry about february in a leap year case 8 printf august i n year daysinmonth 31 break printf su mo tu we th fr sa n if 0 int count 0 will hold values 0 41 iterate over the dimensions of our 2 dimensional grid for int w 0 w nweeks w for int d 0 d days per week d count if count day1 count day1 daysinmonth printf else printf 2i count day1 format using 2 columns printf n move printing to a new line after each week printf n endif iterate over the dimensions of our 2 dimensional grid int day 1 day1 for int w 0 w nweeks w for int d 0 d days per week d if day 1 day daysinmonth printf else printf 2i day format using 2 columns day printf n move printing to a new line after each week nothing to return to main int main int argcount char argvalue initialise local variables with default values int month default month int year default year check the number of command line arguments possibly overriding defaults mycal month year if argcount 1 month atoi argvalue 1 convert argument a string to an int if argcount 2 year atoi argvalue 2 the actual work is performed by another function not in main print cal month year return 0 return 0 exit success to operating system home jamlons documents cits2002 second project cits2002 cits2002 project 2 trove sample data src mycal mycal c zone identifier zonetransfer zoneid 3 referrerurl c users jarrad downloads trove sample data zip home jamlons documents cits2002 second project cits2002 cits2002 project 2 trove sample data src mycal first day of month c zone identifier zonetransfer zoneid 3 referrerurl c users jarrad downloads trove sample data zip home jamlons documents cits2002 second project cits2002 cits2002 project 2 trove sample data src mycal mycal c chris include stdio h include stdlib h include first day of month c define def month 4 define def year 2022 define days in week 7 define nweeks 6 august 2022 su mo tu we th fr sa 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 void print cal int month int year int days in month switch month case 4 printf april i n year days in month 30 break case 8 printf august i n year days in month 31 break printf su mo tu we th fr sa n int day1 first day of month month year int day 1 day1 for int w 0 w nweeks w for int d 0 d days in week d if day 1 day days in month printf else printf 2i day day printf n int main int argc char argv int month def month int year def year print cal month year exit exit success return exit success home jamlons documents cits2002 second project cits2002 cits2002 project 2 trove sample data src mycal first day of month c include time h include string h written by chris mcdonald uwa edu au provided without much explanation yet returns 0 sun 1 mon int first day of month int month int year struct tm tm set all fields of tm to zero to make some fields unknown memset tm 0 sizeof tm initialize the fileds that we already know tm tm mday 1 tm tm mon month 1 0 jan 1 feb tm tm year year 1900 ask the posix function mktime to determine the unknown fields see http pubs opengroup org onlinepubs 9699919799 mktime tm return the integer month value return tm tm wday 0 sun 1 mon home jamlons documents cits2002 second project cits2002 cits2002 project 2 trove sample data src lecture17 calcmarks calcmarks c zone identifier zonetransfer zoneid 3 referrerurl c users jarrad downloads trove sample data zip home jamlons documents cits2002 second project cits2002 cits2002 project 2 trove sample data src lecture17 calcmarks globals c zone identifier zonetransfer zoneid 3 referrerurl c users jarrad downloads trove sample data zip home jamlons documents cits2002 second project cits2002 cits2002 project 2 trove sample data src lecture17 calcmarks calcmarks c include calcmarks h int main int argc char argv int nmarks 0 if argc 1 nmarks readmarks stdin else for int a 1 a argc a file fp fopen argv a r if fp null fprintf stderr cannot open s n argv a exit exit failure nmarks readmarks fp fclose fp correlation nmarks return 0 home jamlons documents cits2002 second project cits2002 cits2002 project 2 trove sample data src lecture17 calcmarks makefile zone identifier zonetransfer zoneid 3 referrerurl c users jarrad downloads trove sample data zip home jamlons documents cits2002 second project cits2002 cits2002 project 2 trove sample data src lecture17 calcmarks correlation c zone identifier zonetransfer zoneid 3 referrerurl c users jarrad downloads trove sample data zip home jamlons documents cits2002 second project cits2002 cits2002 project 2 trove sample data src lecture17 calcmarks readmarks c include calcmarks h local header file provides declarations hello again int readmarks file fp char line bufsiz int nmarks 0 double thisproj double thisexam read a line from the file checking for end of file or an error while fgets line sizeof line fp null sscanf line lf lf thisproj thisexam projmarks nmarks thisproj update global array exammarks nmarks thisexam nmarks if verbose access global variable printf read student d n nmarks return nmarks home jamlons documents cits2002 second project cits2002 cits2002 project 2 trove sample data src lecture17 calcmarks results 29 25 29 33 23 55 24 55 19 31 33 57 32 36 35 48 31 59 33 58 38 53 29 34 16 48 33 45 38 48 30 54 29 59 22 59 24 41 25 55 20 58 38 37 34 58 33 52 34 28 32 52 36 36 23 52 21 31 29 29 15 44 35 56 23 37 30 38 36 50 23 31 18 26 15 35 16 45 29 45 23 42 29 57 30 27 19 42 16 51 18 53 15 34 34 54 18 44 19 29 27 29 17 47 36 55 32 54 15 37 37 29 31 41 31 36 26 27 20 42 35 29 32 41 25 36 22 48 37 31 28 54 15 40 17 53 35 51 15 28 20 52 22 46 25 45 20 41 39 40 25 30 36 34 33 46 32 57 35 30 28 28 16 50 15 30 31 43 17 33 36 37 30 30 21 57 22 46 16 26 36 38 18 58 33 53 16 45 15 31 17 30 21 39 23 42 24 29 22 53 home jamlons documents cits2002 second project cits2002 cits2002 project 2 trove sample data src lecture17 calcmarks correlation c include calcmarks h local header file provides declarations include math h void correlation int nmarks double sumx 0 0 double sumy 0 0 double sumxx 0 0 double sumyy 0 0 double sumxy 0 0 double ssxx ssyy ssxy double r m b for int n 0 n nmarks n sumx projmarks n sumy exammarks n sumxx projmarks n projmarks n sumyy exammarks n exammarks n sumxy projmarks n exammarks n ssxx sumxx sumx sumx nmarks ssyy sumyy sumy sumy nmarks ssxy sumxy sumx sumy nmarks if ssxx ssyy 0 0 r 1 0 else r ssxy sqrt ssxx ssyy printf correlation is 4f n r if ssxx 0 0 m ssxy ssxx b sumy nmarks m sumx nmarks printf line of best fit is y 4fx 4f n m b home jamlons documents cits2002 second project cits2002 cits2002 project 2 trove sample data src lecture17 calcmarks results zone identifier zonetransfer zoneid 3 referrerurl c users jarrad downloads trove sample data zip home jamlons documents cits2002 second project cits2002 cits2002 project 2 trove sample data src lecture17 calcmarks makefile calcmarks calcmarks o globals o readmarks o correlation o cc std c99 wall pedantic werror o calcmarks calcmarks o globals o readmarks o correlation o lm calcmarks o calcmarks c calcmarks h cc std c99 wall pedantic werror c calcmarks c globals o globals c calcmarks h cc std c99 wall pedantic werror c globals c readmarks o readmarks c calcmarks h cc std c99 wall pedantic werror c readmarks c correlation o correlation c calcmarks h cc std c99 wall pedantic werror c correlation c clean rm f o calcmarks home jamlons documents cits2002 second project cits2002 cits2002 project 2 trove sample data src lecture17 calcmarks globals c include calcmarks h we use double quotes double projmarks maxmarks array s size is defined double exammarks maxmarks array s size is defined bool verbose false global is initialized home jamlons documents cits2002 second project cits2002 cits2002 project 2 trove sample data src lecture17 calcmarks readmarks c zone identifier zonetransfer zoneid 3 referrerurl c users jarrad downloads trove sample data zip home jamlons documents cits2002 second project cits2002 cits2002 project 2 trove sample data src lecture17 calcmarks calcmarks h include stdio h include stdbool h include stdlib h declare global preprocessor constants define maxmarks 200 declare global functions extern int readmarks file parameter is not named extern void correlation int parameter is not named declare global variables extern double projmarks array size is not provided extern double exammarks extern bool verbose home jamlons documents cits2002 second project cits2002 cits2002 project 2 trove sample data src lecture17 calcmarks calcmarks h zone identifier zonetransfer zoneid 3 referrerurl c users jarrad downloads trove sample data zip home jamlons documents cits2002 second project cits2002 cits2002 project 2 update c function for updating given files inside given trovefile most likely will not work see findnames c to see how it is done include trove h include file edits h include stdio h include stdbool h include stdlib h include string h include unistd h include getopt h void update trove int counter global structure read file structure rfs read file structure remove the files needing to be updated remove files counter file append pointer append trove rfs file name if appending pointer is empty if append pointer null printf unable to open s please make sure it is correct n rfs file name perror progname exit exit failure for every file within filelist for int y 0 y counter y int file type file attributes rfs filelist y if file type 2 list directory rfs filelist y append pointer else if file type 1 add file path append pointer rfs filelist y read file append pointer rfs filelist y fclose append pointer void build trove int counter printf building the trove now n read file structure rfs read file structure file build pointer create trove rfs file name if build pointer null printf unable to open s please make sure it is correct rfs file name perror progname exit exit failure printf ncounter is d n counter for int y 0 y counter y printf finding file type of s n rfs filelist y int file type file attributes rfs filelist y file is directory if file type 2 printf file is a directory n list directory rfs filelist y build pointer file is reg file else if file type 1 printf file is a regular file n printf current file name s n rfs filelist y add file path build pointer rfs filelist y read file build pointer rfs filelist y fclose build pointer home jamlons documents cits2002 second project cits2002 cits2002 project 2 update o elf counter is d home jamlons documents cits2002 second project cits2002 cits2002 project 2 words c functions for finding words within files include trove h include stdio h include stdlib h include ctype h include string h function for adding all words of a given file of a given length to a given file void read file file build pointer char filename read file structure rfs read file structure global structure int wordcounter 0 int flag 0 int counter 0 char buf char line null array of pointers to strings char words words malloc 10000 sizeof char int word length 0 int number of words 0 int number of words found 0 int flag 0 int realloc count 1 size t linesize 0 ssize t linelen file fp fopen filename r fopen failed if fp null perror progname exit exit failure while there are lines to get from text file while linelen getline line linesize fp 1 flag 0 make each non alpha character a space for char temp line temp temp if isalnum temp temp grab the first word buf strtok line while there are words to get while buf null int length strlen buf char lowercase malloc length 1 lowercase length 0 for int i 0 i length i lowercase i tolower buf i number of words found word length strlen lowercase for int i 0 i number of words i if strcmp lowercase words i flag 1 break if number of words 10000 realloc count words realloc words 10000 sizeof char realloc count if flag words number of words malloc word length sizeof char strcpy words number of words lowercase number of words fprintf build pointer s lowercase buf strtok null printf words found d n counter printf words added to file d n wordcounter add a new line to the end of the line printf number of words found was d n number of words found printf number of words saved is d n number of words fprintf build pointer n for int a 0 a number of words a free words a free line fclose fp home jamlons documents cits2002 second project cits2002 cits2002 project 2 words o elf 
/home/jamlons/Documents/CITS2002 Second Project/CITS2002/CITS2002_project_2/trove
elf e 9 you have entered the wrong invoking in the cmd please make sure you are either using trove f trovefile word or trove f trovefile b r u l length positive integer filelist calling function again counter is d 
/home/jamlons/Documents/CITS2002 Second Project/CITS2002/CITS2002_project_2/trovefile.c
functions for editing reading writing to trove files include trove h include stdio h include stdbool h include stdlib h include string h include unistd h include getopt h function for returning a file stream pointer in write mode for given filename file create trove char trovename file fp fp fopen trovename w if fp null perror progname exit exit failure printf file s has been created n trovename return fp function for returning a file stream pointer in append mode for given filename file append trove char filename file fp fp fopen filename a if fp null perror progname exit exit failure return fp function for returning a file stream pointer in read mode for given filename file read trove char filename file fp fp fopen filename r if fp null perror progname exit exit failure return fp 
/home/jamlons/Documents/CITS2002 Second Project/CITS2002/CITS2002_project_2/trovefile.o
elf 
/home/jamlons/Documents/CITS2002 Second Project/CITS2002/CITS2002_project_2/trove.h
ifndef trove h include stdio h define trove h define bufsize 100000 extern char default file name extern int exit failure extern int exit success extern int file attributes char filename extern void read file file fp char filename extern file create trove char trovename extern file append trove char filename extern file read trove char filename extern void add file path file fp char file name extern void list directory char dirname file fp extern int find names file fp extern char get resolved path char file name extern void compress file extern void read compressed extern char progname typedef struct char file name char word int min word length char resolved path char filelist read file structure typedef struct int dircounter char dirlist directory structure read file structure read file structure directory structure dir struct endif 
/home/jamlons/Documents/CITS2002 Second Project/CITS2002/CITS2002_project_2/trove.o
elf e you have entered the wrong invoking in the cmd please make sure you are either using trove f trovefile word or trove f trovefile b r u l length positive integer filelist 
/home/jamlons/Documents/CITS2002 Second Project/CITS2002/CITS2002_project_2/trove-sample-data/baseballZone.Identifier
zonetransfer zoneid 3 referrerurl c users jarrad downloads trove sample data zip 
/home/jamlons/Documents/CITS2002 Second Project/CITS2002/CITS2002_project_2/trove-sample-data/rotate.c
include stdio h include stdlib h include string h include ctype h compile this program with cc std c11 wall werror o rotate rotate c define rot 13 the rotate function returns the character rot positions further along the alphabetic character sequence from c or c if c is not lower case char rotate char c check if c is lower case or not if islower c the ciphered character is rot positions beyond c allowing for wrap around return a c a rot 26 else return c execution of the whole program begins at the main function int main int argcount char argvalue exit with an error if the number of arguments including the name of the executable is not precisely 2 if argcount 2 fprintf stderr s program expected 1 argument but instead received d n argvalue 0 argcount 1 exit exit failure else define a variable for a later loop int i calculate the length of the first argument int length strlen argvalue 1 loop for every character in the text for i 0 i length i determine and print the ciphered character printf c rotate argvalue 1 i print one final new line character printf n exit indicating success exit exit success return 0 
/home/jamlons/Documents/CITS2002 Second Project/CITS2002/CITS2002_project_2/trove-sample-data/pizza
if you have a pizza with radius z and thickness a its volume is pi z z a 
/home/jamlons/Documents/CITS2002 Second Project/CITS2002/CITS2002_project_2/trove-sample-data/baseball
http sports yahoo com blogs mlb big league stew jean segura steals second then steals first bizarre 103642855 mlb html in baseball the object is to iterate as many tokens as you can through a 4 slotted dequeue fifo implemented internally as a self referencing doubly linked list iteration run time is earned by the batting team by causing the hardest to solve ball sorting problems possible for the other team most entropic ball state the opposing team manages a counter labeled outs initialized to 0 each inning if the counter is incremented to 3 the teams switch objectives and a the out counter is reset each full iteration of a player though the buffer increments a team s run variable the team with the greatest runs wins typically by earning the most loop execution time the team managing the out counter distributes themselves optimally around the field such that they ll be able to detect the ball s location within a short period of time and so that they can sort the ball back to their prime ball holder the pitcher to get a chance to increment the out counter and thus eventually have their turn at bat and increase their runs the pitching team gives the batting team a chance to hit the ball and cause the ball sorting problem while the ball is being sorted player tokens can iterate through the fifo buffer nodes bases only one additional player can enter base queue per sorting problem created the bases are allowed to be null no players and players can move in both directions around the loop a pitcher must give adequate chance for the ball sorting problem to be created by passing the ball through a volume called the strike zone which is created by clipping the prismatic space above home plate to the vertical interval between the batter s knees and the midpoint in their chest the midpoint is a point half way between the shoulders and top of the pants note creating an impossible planar strike zone by pulling one s pants down to the knee and bending at the waste to bring the shoulders in line is considered extremely rude unsportsmanlike conduct if the batter does not swing at a valid pitch then it is counted against them as a strike if the bat is swung at the ball and no valid sorting problem is created it is considered a strike whether the ball passed through the strike zone or not if a batter accumulates 3 strikes it is converted to an out and their iteration is preempted the pitcher may throw outside the strike zone to trick the player into leaping at an unfair starting condition but if the player does not swing at such invalid pitches then they are considered unfit balls four such balls allows the player to automatically reach 1st base safely and if occupied the bases will increment possibly causing a run to be scored this is called walking since there is no danger of being interrupted walks in the park are quite nice but do not make for good games a batter must cause a valid sorting problem with the ball within 3 attempts swings at valid pitches or they lose their chance to enter the fifo and the out counter is incremented valid sorting problems are those where the post hit ball travel vector is within the area formed by rotating a ray extending from home through base 0 until it intersects base 3 inclusive if the valid ball is hit out of the park or strikes the pole erected along the base lines to make the problem space visible while above the fence then the ball sorting problem is considered infinitely complex and the iteration queue can be emptied of all players actively in the fifo buffer and they all count as runs this is called a home run the ball sorting problem is considered too simple if the ball is caught from out of the air directly by the opposing team before it strikes the ground and such counts as an immediate out forfeiting the running player s iteration cycle hitting the ball outside the valid sorting problem space is called a foul ball counting as a strike the player at bat begins at base zero home and after hitting the ball tries to iterate from base1 to base2 to base3 and back home around the diamond shape without getting touched by the ball or a glove covered ball if the opposing team touches with the ball a player in the process of updating the base node states moving between them then the out counter is incremented the iterating player s value is considered corrupted and they are immediately garbage collected from the iteration area and re ineserted into the at bat chance queue while a player is stored in a node touching a base they are considered immutable safe and touching them with the ball does not remove them from the fifo queue if the destination base is touched while the player is iterating and to return is impossible due to 1st base iteration or players behind pushing them forward then they are considered out as well the moment a running player touches home base on their final increment they are no longer considered in the fifo queue and the run counter is incremented this resolves the issue of a player running home while a player is at bat the players on the base nodes are in an unstable state and can attempt to iterate to a non null base or home pretty much at any time however while the pitcher has control of the ball he creates a deadlock in the running iterations by threat of race condition due to of his ability to deliver the ball to a destination base or player who can tag the runner out tossing the ball directly at the iterating players is considered illegal because of injury concerns so when the batter strikes the ball any on base players consider their chances of successful iteration and may attempt to run they take advantage of the length of time it takes for the opposing team to sort the ball back into a high risk state storing two running players per node or swapping player order is considered an illegal operation the lower valued player must return to the prior node or be counted out the pitcher gives batters a chance to create sorting problems while keeping runners in dead lock preventing iteration the batter creates the most time consuming sorting problem possible including just tapping the ball bunting it leaving it near home plate the runners look for opportunities to iterate without causing exceptions all while some scoreboard software fails to implement a doubly linked list properly 
/home/jamlons/Documents/CITS2002 Second Project/CITS2002/CITS2002_project_2/trove-sample-data/rotate.cZone.Identifier
zonetransfer zoneid 3 referrerurl c users jarrad downloads trove sample data zip 
/home/jamlons/Documents/CITS2002 Second Project/CITS2002/CITS2002_project_2/trove-sample-data/dilbert-requirements.jpgZone.Identifier
zonetransfer zoneid 3 referrerurl c users jarrad downloads trove sample data zip 
/home/jamlons/Documents/CITS2002 Second Project/CITS2002/CITS2002_project_2/trove-sample-data/rotate
elf 
/home/jamlons/Documents/CITS2002 Second Project/CITS2002/CITS2002_project_2/trove-sample-data/rotateZone.Identifier
zonetransfer zoneid 3 referrerurl c users jarrad downloads trove sample data zip 
/home/jamlons/Documents/CITS2002 Second Project/CITS2002/CITS2002_project_2/trove-sample-data/pizzaZone.Identifier
zonetransfer zoneid 3 referrerurl c users jarrad downloads trove sample data zip 
/home/jamlons/Documents/CITS2002 Second Project/CITS2002/CITS2002_project_2/trove-sample-data/csseduck.pngZone.Identifier
zonetransfer zoneid 3 referrerurl c users jarrad downloads trove sample data zip 
/home/jamlons/Documents/CITS2002 Second Project/CITS2002/CITS2002_project_2/trove-sample-data/src/estimatecron-sample.cZone.Identifier
zonetransfer zoneid 3 referrerurl c users jarrad downloads trove sample data zip 
/home/jamlons/Documents/CITS2002 Second Project/CITS2002/CITS2002_project_2/trove-sample-data/src/estimatecron-sample.c
include stdio h include stdlib h include stdbool h include string h include unistd h include ctype h include time h written by chris mcdonald uwa edu au aug 2022 under licence creativecommons org licenses by nc sa 4 0 compile with cc std c11 wall werror o estimatecron estimatecron c execute with estimatecron month crontab file estimates file or debug y estimatecron month crontab file estimates file define max line length 100 define max command length 40 define max crontabs 20 define max estimates 20 define max processes 20 define columns crontab 6 define columns estimates 2 define char comment define str asterisk define asterisk 1 data read from crontab file provided on command line the fields are named to match those of a struct tm from time h struct int min 0 59 or asterisk iff int hour 0 23 int mday 1 31 int mon 0 11 int wday 0 6 int cmdindex index into the estimates crontabs max crontabs int n crontabs 0 data read from estimates file provided on command line struct char name max command length 1 1 for 0 byte int minutes estimate of execution time int ntimes number of times invoked estimates max estimates int n estimates 0 the very simple process table representing currently running processes struct int pid 1 2 int cmdindex index into the estimates int finishtime in minutes process table max processes int n processes 0 required statistics int total invoked 0 total commands ever invoked int max running 0 max processes running at any time bool debug false true iff environ variable debug defined define n months 12 int days in month n months 31 28 31 30 31 30 31 31 30 31 30 31 char month names n months jan feb mar apr may jun jul aug sep oct nov dec define n weekdays 7 char weekday names n weekdays sun mon tue wed thu fri sat remove any trailing end of line characters from the line from lecture 8 void trim line char line loop until we reach the end of line int i 0 while line i 0 if line i r line i n carriage return or newline line i 0 overwrite with null byte break leave the loop early i i 1 iterate through character array is whitespace could be implemented as a preprocessor macro or a c function define is whitespace ch ch ch t bool is comment line char line int i 0 while is whitespace line i skip until first non whitespace i return line i char comment bool all digits char str for int i 0 str i 0 i if isdigit str i return false return true int check integer char str int minvalue int maxvalue char errdesc if strcmp str str asterisk 0 return asterisk else if all digits str int value atoi str if value minvalue value maxvalue return value fprintf stderr s is an invalid s n str errdesc exit exit failure int check month char str bool permit asterisk if permit asterisk strcmp str str asterisk 0 return asterisk else if all digits str int month atoi str if month 0 month n months return month else for int m 0 m n months m if strncmp month names m str 3 0 str 3 0 return m fprintf stderr s is an invalid month n str exit exit failure int check weekday char str if strcmp str str asterisk 0 return asterisk else if all digits str int weekday atoi str if weekday 0 weekday n weekdays return weekday else for int m 0 m n weekdays m if strncmp weekday names m str 3 0 str 3 0 return m fprintf stderr s is an invalid day of the week n str exit exit failure int find command in estimates char command for int e 0 e n estimates e if strcmp estimates e name command 0 return e fprintf stderr s is an unknown command n command exit exit failure void print integer int x if x asterisk printf s str asterisk else printf 2i x void print 1 crontab entry int c print integer crontabs c min print integer crontabs c hour print integer crontabs c mday print integer crontabs c mon print integer crontabs c wday printf t t s n estimates crontabs c cmdindex name not required print the contents of crontabs to confirm what was read void display crontabs void if debug n crontabs 0 printf crontab entries n for int c 0 c n crontabs c printf t print 1 crontab entry c printf n not required print the contents of estimates to confirm what was read void display estimates void if debug n estimates 0 printf estimates entries n for int e 0 e n estimates e printf t 40s t i n estimates e name estimates e minutes printf n void read crontab file char filename file fp fopen filename r report an error terminate if file cannot be opened if fp null fprintf stderr unable to open crontab file s n filename exit exit failure int lc 0 linecount for error reports char line max line length 1 while fgets line sizeof line fp null lc trim line line remove n or r ignore a comment line if is comment line line continue expected format mins hours monthday month weekday command name char min max line length probably longer than needed char hour max line length but guaranteed to be long enough char mday max line length char mon max line length char wday max line length char cmd max line length int valid columns 0 if sscanf line s s s s s s min hour mday mon wday cmd columns crontab crontabs n crontabs min check integer min 0 59 minute crontabs n crontabs hour check integer hour 0 23 hour crontabs n crontabs mday check integer mday 1 31 day of the month crontabs n crontabs mon check month mon true crontabs n crontabs wday check weekday wday crontabs n crontabs cmdindex find command in estimates cmd if crontabs n crontabs mon asterisk crontabs n crontabs mday days in month crontabs n crontabs mon valid columns columns crontab if valid columns columns crontab fprintf stderr line i unrecognized in crontab file s n lc line exit exit failure n crontabs end of fgets fclose fp void read estimates file char filename file fp fopen filename r report an error terminate if file cannot be opened if fp null fprintf stderr unable to open estimates file s n filename exit exit failure int lc 0 linecount for error reports char line max line length 1 while fgets line sizeof line fp null lc trim line line remove n or r ignore a comment line if is comment line line continue expected format command name minutes int valid columns 0 char minutes max line length if sscanf line s s estimates n estimates name minutes columns estimates estimates n estimates minutes atoi minutes if estimates n estimates minutes 0 valid columns columns estimates if valid columns columns estimates fprintf stderr line i unrecognized in estimates file s n lc line exit exit failure n estimates end of fgets fclose fp execute a new command by adding it to the process table updating statistics void invoke process int c int now char when if n processes max processes static int pid 0 not required just for debugging int cmdindex crontabs c cmdindex add this new process to the process table process table n processes cmdindex cmdindex process table n processes pid pid process table n processes finishtime now estimates cmdindex minutes n processes total invoked estimates cmdindex ntimes have we found a new maximum number of ever running processes if max running n processes max running n processes if debug if when 0 printf s n when when 0 0 printf t tinvoke pid i nrunning i t pid n processes print 1 crontab entry c else if debug printf t tcannot invoke new process maximum i n max processes have any of the currently running processes now finished void terminate processes int now char when for int p 0 p n processes p if process table p finishtime now finished if debug if when 0 printf s n when when 0 0 printf t thas terminated pid i nrunning i t s n process table p pid n processes 1 estimates process table p cmdindex name remove this terminated process from process table process table p process table n processes 1 n processes p a match could be implemented as a preprocessor macro or a c function define a match x y x y x asterisk date calendar based code re used from workshop 2 void simulate int this minute struct tm tp char when 40 if debug sprintf when 02i 02i t 02i s tp tm hour tp tm min tp tm mday month names tp tm mon remove any processes that have terminated within the past minute terminate processes this minute when iterate over all crontab entries finding matching ones for int c 0 c n crontabs c does the current time match all of the date time fields if a match crontabs c min tp tm min a match crontabs c hour tp tm hour a match crontabs c mday tp tm mday a match crontabs c mon tp tm mon a match crontabs c wday tp tm wday if here then this crontab entry requires a new process to be invoked invoke process c this minute when foreach crontab entry date calendar based code re used from workshop 2 void iterate over all minutes v1 int month int year set all fields of tm to zero to make some fields unknown struct tm tm memset tm 0 sizeof tm initialize the fileds that we already know tm tm mday 1 1st day of required month tm tm mon month 0 jan 1 feb tm tm year year 1900 time t secs int mins iterate over all of the minutes in the required month int total minutes 60 24 days in month month for secs mktime tm mins 0 mins total minutes secs 60 mins struct tm tp localtime secs simulate mins tp if debug printf n void iterate over all minutes v2 int month int year set all fields of tm to zero to make some fields unknown struct tm tm memset tm 0 sizeof tm initialize the fileds that we already know tm tm mday 1 1st day of required month tm tm mon month 0 jan 1 feb tm tm year year 1900 ask the posix function mktime to determine the unknown fields see http pubs opengroup org onlinepubs 9699919799 mktime tm tm tm mday 0 tm tm wday tm tm wday 6 7 previous day of the week iterate over all of the minutes in the required month int total minutes 60 24 days in month month for int mins 0 mins total minutes mins tm tm min mins 60 tm tm hour mins 60 24 if tm tm hour 0 tm tm min 0 now at midnight 00 00 tm tm mday advance to tomorrow tm tm wday tm tm wday 1 7 simulate mins tm if debug printf n void reset statistics void n processes 0 total invoked 0 max running 0 void print statistics void if debug n estimates 0 printf command invocations n for int e 0 e n estimates e printf t 40s t i n estimates e name estimates e ntimes printf n int maxi 1 maximum invoked int maxe 1 index in estimates of maximum for int e 0 e n estimates e if maxi estimates e ntimes maxi estimates e ntimes maxe e the all important final result line printf s t i t i n maxe 1 none estimates maxe name total invoked max running int main int argc char argv if argc 4 fprintf stderr usage s month crontab file estimates file n argv 0 exit exit failure debug getenv debug null not required for project read the estimates file first so that all command names are known read estimates file argv 3 not required print the contents of estimates to confirm what was read display estimates read the crontab file only accepting known command names read crontab file argv 2 not required print the contents of crontabs to confirm what was read display crontabs if n crontabs 0 month may be requested with an integer 0 11 or 3 letter name not int month check month argv 1 false time t now time null int year localtime now tm year 1900 current year reset statistics iterate over all minutes v1 month year print statistics reset statistics iterate over all minutes v2 month year print statistics exit exit success return 0 
/home/jamlons/Documents/CITS2002 Second Project/CITS2002/CITS2002_project_2/trove-sample-data/src/mycal/solution.cZone.Identifier
zonetransfer zoneid 3 referrerurl c users jarrad downloads trove sample data zip 
/home/jamlons/Documents/CITS2002 Second Project/CITS2002/CITS2002_project_2/trove-sample-data/src/mycal/solution.c
written by chris mcdonald uwa edu au compile cc std c99 wall werror o mycal mycal c run mycal month year include stdio h required for printf include stdlib h required for atoi include first day of month c including c source usually strongly encouraged these are our default values used if command line args not provided define default month 8 define default year 2022 define nweeks 6 define days per week 7 our print cal function receives 2 arguments but doesn t return a value void print cal int month int year int day1 1 1st aug 2022 is a monday later initialise this with a call to first day of month month year int day1 first day of month month year int daysinmonth 0 switch month case 1 printf january i n year daysinmonth 31 break add other months worry about february in a leap year case 8 printf august i n year daysinmonth 31 break printf su mo tu we th fr sa n if 0 int count 0 will hold values 0 41 iterate over the dimensions of our 2 dimensional grid for int w 0 w nweeks w for int d 0 d days per week d count if count day1 count day1 daysinmonth printf else printf 2i count day1 format using 2 columns printf n move printing to a new line after each week printf n endif iterate over the dimensions of our 2 dimensional grid int day 1 day1 for int w 0 w nweeks w for int d 0 d days per week d if day 1 day daysinmonth printf else printf 2i day format using 2 columns day printf n move printing to a new line after each week nothing to return to main int main int argcount char argvalue initialise local variables with default values int month default month int year default year check the number of command line arguments possibly overriding defaults mycal month year if argcount 1 month atoi argvalue 1 convert argument a string to an int if argcount 2 year atoi argvalue 2 the actual work is performed by another function not in main print cal month year return 0 return 0 exit success to operating system 
/home/jamlons/Documents/CITS2002 Second Project/CITS2002/CITS2002_project_2/trove-sample-data/src/mycal/mycal.cZone.Identifier
zonetransfer zoneid 3 referrerurl c users jarrad downloads trove sample data zip 
/home/jamlons/Documents/CITS2002 Second Project/CITS2002/CITS2002_project_2/trove-sample-data/src/mycal/first_day_of_month.cZone.Identifier
zonetransfer zoneid 3 referrerurl c users jarrad downloads trove sample data zip 
/home/jamlons/Documents/CITS2002 Second Project/CITS2002/CITS2002_project_2/trove-sample-data/src/mycal/mycal.c
chris include stdio h include stdlib h include first day of month c define def month 4 define def year 2022 define days in week 7 define nweeks 6 august 2022 su mo tu we th fr sa 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 void print cal int month int year int days in month switch month case 4 printf april i n year days in month 30 break case 8 printf august i n year days in month 31 break printf su mo tu we th fr sa n int day1 first day of month month year int day 1 day1 for int w 0 w nweeks w for int d 0 d days in week d if day 1 day days in month printf else printf 2i day day printf n int main int argc char argv int month def month int year def year print cal month year exit exit success return exit success 
/home/jamlons/Documents/CITS2002 Second Project/CITS2002/CITS2002_project_2/trove-sample-data/src/mycal/first_day_of_month.c
include time h include string h written by chris mcdonald uwa edu au provided without much explanation yet returns 0 sun 1 mon int first day of month int month int year struct tm tm set all fields of tm to zero to make some fields unknown memset tm 0 sizeof tm initialize the fileds that we already know tm tm mday 1 tm tm mon month 1 0 jan 1 feb tm tm year year 1900 ask the posix function mktime to determine the unknown fields see http pubs opengroup org onlinepubs 9699919799 mktime tm return the integer month value return tm tm wday 0 sun 1 mon 
/home/jamlons/Documents/CITS2002 Second Project/CITS2002/CITS2002_project_2/trove-sample-data/src/lecture17/calcmarks/calcmarks.cZone.Identifier
zonetransfer zoneid 3 referrerurl c users jarrad downloads trove sample data zip 
/home/jamlons/Documents/CITS2002 Second Project/CITS2002/CITS2002_project_2/trove-sample-data/src/lecture17/calcmarks/globals.cZone.Identifier
zonetransfer zoneid 3 referrerurl c users jarrad downloads trove sample data zip 
/home/jamlons/Documents/CITS2002 Second Project/CITS2002/CITS2002_project_2/trove-sample-data/src/lecture17/calcmarks/calcmarks.c
include calcmarks h int main int argc char argv int nmarks 0 if argc 1 nmarks readmarks stdin else for int a 1 a argc a file fp fopen argv a r if fp null fprintf stderr cannot open s n argv a exit exit failure nmarks readmarks fp fclose fp correlation nmarks return 0 
/home/jamlons/Documents/CITS2002 Second Project/CITS2002/CITS2002_project_2/trove-sample-data/src/lecture17/calcmarks/MakefileZone.Identifier
zonetransfer zoneid 3 referrerurl c users jarrad downloads trove sample data zip 
/home/jamlons/Documents/CITS2002 Second Project/CITS2002/CITS2002_project_2/trove-sample-data/src/lecture17/calcmarks/correlation.cZone.Identifier
zonetransfer zoneid 3 referrerurl c users jarrad downloads trove sample data zip 
/home/jamlons/Documents/CITS2002 Second Project/CITS2002/CITS2002_project_2/trove-sample-data/src/lecture17/calcmarks/readmarks.c
include calcmarks h local header file provides declarations hello again int readmarks file fp char line bufsiz int nmarks 0 double thisproj double thisexam read a line from the file checking for end of file or an error while fgets line sizeof line fp null sscanf line lf lf thisproj thisexam projmarks nmarks thisproj update global array exammarks nmarks thisexam nmarks if verbose access global variable printf read student d n nmarks return nmarks 
/home/jamlons/Documents/CITS2002 Second Project/CITS2002/CITS2002_project_2/trove-sample-data/src/lecture17/calcmarks/RESULTS
29 25 29 33 23 55 24 55 19 31 33 57 32 36 35 48 31 59 33 58 38 53 29 34 16 48 33 45 38 48 30 54 29 59 22 59 24 41 25 55 20 58 38 37 34 58 33 52 34 28 32 52 36 36 23 52 21 31 29 29 15 44 35 56 23 37 30 38 36 50 23 31 18 26 15 35 16 45 29 45 23 42 29 57 30 27 19 42 16 51 18 53 15 34 34 54 18 44 19 29 27 29 17 47 36 55 32 54 15 37 37 29 31 41 31 36 26 27 20 42 35 29 32 41 25 36 22 48 37 31 28 54 15 40 17 53 35 51 15 28 20 52 22 46 25 45 20 41 39 40 25 30 36 34 33 46 32 57 35 30 28 28 16 50 15 30 31 43 17 33 36 37 30 30 21 57 22 46 16 26 36 38 18 58 33 53 16 45 15 31 17 30 21 39 23 42 24 29 22 53 
/home/jamlons/Documents/CITS2002 Second Project/CITS2002/CITS2002_project_2/trove-sample-data/src/lecture17/calcmarks/correlation.c
include calcmarks h local header file provides declarations include math h void correlation int nmarks double sumx 0 0 double sumy 0 0 double sumxx 0 0 double sumyy 0 0 double sumxy 0 0 double ssxx ssyy ssxy double r m b for int n 0 n nmarks n sumx projmarks n sumy exammarks n sumxx projmarks n projmarks n sumyy exammarks n exammarks n sumxy projmarks n exammarks n ssxx sumxx sumx sumx nmarks ssyy sumyy sumy sumy nmarks ssxy sumxy sumx sumy nmarks if ssxx ssyy 0 0 r 1 0 else r ssxy sqrt ssxx ssyy printf correlation is 4f n r if ssxx 0 0 m ssxy ssxx b sumy nmarks m sumx nmarks printf line of best fit is y 4fx 4f n m b 
/home/jamlons/Documents/CITS2002 Second Project/CITS2002/CITS2002_project_2/trove-sample-data/src/lecture17/calcmarks/RESULTSZone.Identifier
zonetransfer zoneid 3 referrerurl c users jarrad downloads trove sample data zip 
/home/jamlons/Documents/CITS2002 Second Project/CITS2002/CITS2002_project_2/trove-sample-data/src/lecture17/calcmarks/Makefile
calcmarks calcmarks o globals o readmarks o correlation o cc std c99 wall pedantic werror o calcmarks calcmarks o globals o readmarks o correlation o lm calcmarks o calcmarks c calcmarks h cc std c99 wall pedantic werror c calcmarks c globals o globals c calcmarks h cc std c99 wall pedantic werror c globals c readmarks o readmarks c calcmarks h cc std c99 wall pedantic werror c readmarks c correlation o correlation c calcmarks h cc std c99 wall pedantic werror c correlation c clean rm f o calcmarks 
/home/jamlons/Documents/CITS2002 Second Project/CITS2002/CITS2002_project_2/trove-sample-data/src/lecture17/calcmarks/globals.c
include calcmarks h we use double quotes double projmarks maxmarks array s size is defined double exammarks maxmarks array s size is defined bool verbose false global is initialized 
/home/jamlons/Documents/CITS2002 Second Project/CITS2002/CITS2002_project_2/trove-sample-data/src/lecture17/calcmarks/readmarks.cZone.Identifier
zonetransfer zoneid 3 referrerurl c users jarrad downloads trove sample data zip 
/home/jamlons/Documents/CITS2002 Second Project/CITS2002/CITS2002_project_2/trove-sample-data/src/lecture17/calcmarks/calcmarks.h
include stdio h include stdbool h include stdlib h declare global preprocessor constants define maxmarks 200 declare global functions extern int readmarks file parameter is not named extern void correlation int parameter is not named declare global variables extern double projmarks array size is not provided extern double exammarks extern bool verbose 
/home/jamlons/Documents/CITS2002 Second Project/CITS2002/CITS2002_project_2/trove-sample-data/src/lecture17/calcmarks/calcmarks.hZone.Identifier
zonetransfer zoneid 3 referrerurl c users jarrad downloads trove sample data zip 
/home/jamlons/Documents/CITS2002 Second Project/CITS2002/CITS2002_project_2/update.c
function for updating given files inside given trovefile most likely will not work see findnames c to see how it is done include trove h include file edits h include stdio h include stdbool h include stdlib h include string h include unistd h include getopt h void update trove int counter global structure read file structure rfs read file structure remove the files needing to be updated remove files counter file append pointer append trove rfs file name if appending pointer is empty if append pointer null printf unable to open s please make sure it is correct n rfs file name perror progname exit exit failure for every file within filelist for int y 0 y counter y int file type file attributes rfs filelist y if file type 2 list directory rfs filelist y append pointer else if file type 1 add file path append pointer rfs filelist y read file append pointer rfs filelist y fclose append pointer void build trove int counter printf building the trove now n read file structure rfs read file structure file build pointer create trove rfs file name if build pointer null printf unable to open s please make sure it is correct rfs file name perror progname exit exit failure printf ncounter is d n counter for int y 0 y counter y printf finding file type of s n rfs filelist y int file type file attributes rfs filelist y file is directory if file type 2 printf file is a directory n list directory rfs filelist y build pointer file is reg file else if file type 1 printf file is a regular file n printf current file name s n rfs filelist y add file path build pointer rfs filelist y read file build pointer rfs filelist y fclose build pointer 
/home/jamlons/Documents/CITS2002 Second Project/CITS2002/CITS2002_project_2/update.o
elf counter is d 
/home/jamlons/Documents/CITS2002 Second Project/CITS2002/CITS2002_project_2/words.c
functions for finding words within files include trove h include stdio h include stdlib h include ctype h include string h function for adding all words of a given file of a given length to a given file void read file file build pointer char filename read file structure rfs read file structure global structure int wordcounter 0 int flag 0 int counter 0 char buf char line null array of pointers to strings char words words malloc 10000 sizeof char int word length 0 int number of words 0 int number of words found 0 int flag 0 int realloc count 1 size t linesize 0 ssize t linelen file fp fopen filename r fopen failed if fp null perror progname exit exit failure while there are lines to get from text file while linelen getline line linesize fp 1 flag 0 make each non alpha character a space for char temp line temp temp if isalnum temp temp grab the first word buf strtok line while there are words to get while buf null int length strlen buf char lowercase malloc length 1 lowercase length 0 for int i 0 i length i lowercase i tolower buf i number of words found word length strlen lowercase for int i 0 i number of words i if strcmp lowercase words i flag 1 break if number of words 10000 realloc count words realloc words 10000 sizeof char realloc count if flag words number of words malloc word length sizeof char strcpy words number of words lowercase number of words fprintf build pointer s lowercase buf strtok null printf words found d n counter printf words added to file d n wordcounter add a new line to the end of the line printf number of words found was d n number of words found printf number of words saved is d n number of words fprintf build pointer n for int a 0 a number of words a free words a free line fclose fp 
/home/jamlons/Documents/CITS2002 Second Project/CITS2002/CITS2002_project_2/words.o
elf 
